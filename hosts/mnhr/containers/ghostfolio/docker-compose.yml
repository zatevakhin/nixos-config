---
name: ghostfolio
services:
  ghostfolio:
    image: docker.io/ghostfolio/ghostfolio:latest
    container_name: ghostfolio
    init: true
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    environment:
      ACCESS_TOKEN_SALT:
      JWT_SECRET_KEY:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?connect_timeout=300&sslmode=prefer
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3333/api/v1/health']
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
     - traefik.enable=true
     - traefik.http.routers.ghostfolio.rule=Host(`gf.homeworld.lan`)
     - traefik.http.routers.ghostfolio.tls=true
     - traefik.http.routers.ghostfolio.entrypoints=websecure
     - traefik.http.routers.ghostfolio.tls.certresolver=stepca
     - traefik.http.services.ghostfolio.loadbalancer.server.port=3333
     - traefik.docker.network=proxy
    dns:
      - 10.0.1.3 # DNS in `proxy` network
    networks:
      proxy:
        ipv4_address: 10.0.1.11
      ghostfolio:

  postgres:
    image: docker.io/library/postgres:15
    container_name: gf-postgres
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:5432/${POSTGRES_DB}?connect_timeout=300&sslmode=prefer"
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_READ_SEARCH
      - FOWNER
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      ghostfolio:

  redis:
    image: docker.io/library/redis:alpine
    container_name: gf-redis
    environment:
      - REDIS_HOST
      - REDIS_PORT
      - REDIS_PASSWORD
    user: '999:1000'
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    command: ['redis-server', '--requirepass', $REDIS_PASSWORD]
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli --pass "$REDIS_PASSWORD" ping | grep PONG']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      ghostfolio:

volumes:
  postgres:

networks:
  ghostfolio:
    driver: bridge
  proxy:
    external: true

