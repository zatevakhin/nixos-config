---
services:
  radarr:
    container_name: radarr
    image: ghcr.io/hotio/radarr:latest
    restart: unless-stopped
    # ports:
    #   - 7878:7878
    environment:
      - PUID=1000
      - PGID=100
      - TZ=Europe/Lisbon
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - radarr-config:/config
      - /storage/media:/data
    network_mode: service:protonwire2
    depends_on:
      - protonwire2

  sonarr:
    container_name: sonarr
    image: ghcr.io/hotio/sonarr:latest
    restart: unless-stopped
    #ports:
      #- 8989:8989
    environment:
      - PUID=1000
      - PGID=100
      - TZ=Europe/Lisbon
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - sonarr-config:/config
      - /storage/media:/data
    network_mode: service:protonwire2
    depends_on:
      - protonwire2

  bazarr:
    container_name: bazarr
    image: ghcr.io/hotio/bazarr:latest
    restart: unless-stopped
    #ports:
      #- 6767:6767
    environment:
      - PUID=1000
      - PGID=100
      - TZ=Europe/Lisbon
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - bazarr-config:/config
      - /storage/media/library:/data/library
    network_mode: service:protonwire2
    depends_on:
      - protonwire2

  lidarr:
    container_name: lidarr
    image: ghcr.io/hotio/lidarr:latest
    restart: unless-stopped
    #ports:
      #- 8686:8686
    environment:
      - PUID=1000
      - PGID=100
      - TZ=Europe/Lisbon
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - lidarr-config:/config
      - /storage/media:/data
    network_mode: service:protonwire2
    depends_on:
      - protonwire2

  readarr:
    container_name: readarr
    image: ghcr.io/hotio/readarr:latest
    restart: unless-stopped
    #ports:
      #- 8787:8787
    environment:
      - PUID=1000
      - PGID=100
      - TZ=Europe/Lisbon
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - readarr-config:/config
      - /storage/media:/data
    network_mode: service:protonwire2
    depends_on:
      - protonwire2

  prowlarr:
    container_name: prowlarr
    image: ghcr.io/hotio/prowlarr
    restart: unless-stopped
    #ports:
      #- 9696:9696
    environment:
      - PUID=1000
      - PGID=100
      - TZ=Europe/Lisbon
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - prowlarr-config:/config
    network_mode: service:protonwire2
    depends_on:
      - protonwire2

  jellyseerr:
    container_name: jellyseerr
    image: ghcr.io/hotio/jellyseerr
    restart: unless-stopped
    #ports:
      #- 5055:5055
    environment:
      - PUID=1000
      - PGID=100
      - TZ=Europe/Lisbon
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - jellyseerr-config:/config
    network_mode: service:protonwire2
    depends_on:
      - protonwire2

  qbittorrent-nox:
    image: qbittorrentofficial/qbittorrent-nox:latest
    restart: unless-stopped
    container_name: qbittorrent
    read_only: true
    tmpfs:
      - /tmp
    stop_grace_period: 30m
    environment:
      - QBT_LEGAL_NOTICE=confirm
      - QBT_WEBUI_PORT=8080
    volumes:
      - qbittorrent-config:/config
      - /storage/media:/data
    network_mode: service:protonwire2
    depends_on:
      - protonwire2

  protonwire2:
    container_name: protonwire2
    image: ghcr.io/tprasadtp/protonwire:latest
    restart: unless-stopped
    environment:
      # Quote this value as server name can contain '#'.
      PROTONVPN_SERVER: "UA#44"
      # Set this to 1 to show debug logs for issue forms.
      DEBUG: "0"
      # Set this to 0 to disable kill-switch.
      KILL_SWITCH: "1"
    # NET_ADMIN capability is mandatory!
    cap_add:
      - NET_ADMIN
    # sysctl net.ipv4.conf.all.rp_filter is mandatory!
    # net.ipv6.conf.all.disable_ipv6 disables IPv6 as protonVPN does not support IPv6.
    # 'net.*' sysctls are not required on application containers,
    # as they share network stack with protonwire container.
    sysctls:
      net.ipv4.conf.all.rp_filter: 2
      net.ipv6.conf.all.disable_ipv6: 1
    volumes:
      - type: tmpfs
        target: /tmp
      - type: bind
        source: "${PROTON_VPN_PRIVATE_KEY_PATH}"
        target: "/etc/protonwire/private-key"
        read_only: true
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      # Radarr
      - traefik.http.routers.radarr.rule=Host(`${RADARR_DOMAIN_NAME}`)
      - traefik.http.routers.radarr.tls=true
      - traefik.http.routers.radarr.entrypoints=websecure
      - traefik.http.routers.radarr.tls.certresolver=stepca
      - traefik.http.routers.radarr.service=radarr
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      # # Sonarr
      - traefik.http.routers.sonarr.rule=Host(`${SONARR_DOMAIN_NAME}`)
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.entrypoints=websecure
      - traefik.http.routers.sonarr.tls.certresolver=stepca
      - traefik.http.routers.sonarr.service=sonarr
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      # # Bazarr
      - traefik.http.routers.bazarr.rule=Host(`${BAZARR_DOMAIN_NAME}`)
      - traefik.http.routers.bazarr.tls=true
      - traefik.http.routers.bazarr.entrypoints=websecure
      - traefik.http.routers.bazarr.tls.certresolver=stepca
      - traefik.http.routers.bazarr.service=bazarr
      - traefik.http.services.bazarr.loadbalancer.server.port=6767
      # # Lidarr
      - traefik.http.routers.lidarr.rule=Host(`${LIDARR_DOMAIN_NAME}`)
      - traefik.http.routers.lidarr.tls=true
      - traefik.http.routers.lidarr.entrypoints=websecure
      - traefik.http.routers.lidarr.tls.certresolver=stepca
      - traefik.http.routers.lidarr.service=lidarr
      - traefik.http.services.lidarr.loadbalancer.server.port=8686
      # # Readarr
      - traefik.http.routers.readarr.rule=Host(`${READARR_DOMAIN_NAME}`)
      - traefik.http.routers.readarr.tls=true
      - traefik.http.routers.readarr.entrypoints=websecure
      - traefik.http.routers.readarr.tls.certresolver=stepca
      - traefik.http.routers.readarr.service=readarr
      - traefik.http.services.readarr.loadbalancer.server.port=8787
      # # Prowlarr
      - traefik.http.routers.prowlarr.rule=Host(`${PROWLARR_DOMAIN_NAME}`)
      - traefik.http.routers.prowlarr.tls=true
      - traefik.http.routers.prowlarr.entrypoints=websecure
      - traefik.http.routers.prowlarr.tls.certresolver=stepca
      - traefik.http.routers.prowlarr.service=prowlarr
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
      # # Jellyseerr
      - traefik.http.routers.jellyseerr.rule=Host(`${JELLYSEERR_DOMAIN_NAME}`)
      - traefik.http.routers.jellyseerr.tls=true
      - traefik.http.routers.jellyseerr.entrypoints=websecure
      - traefik.http.routers.jellyseerr.tls.certresolver=stepca
      - traefik.http.routers.jellyseerr.service=jellyseerr
      - traefik.http.services.jellyseerr.loadbalancer.server.port=5055
      # # qBittorrent
      - traefik.http.routers.qbittorrent.rule=Host(`${QBITTORRENT_DOMAIN_NAME}`)
      - traefik.http.routers.qbittorrent.tls=true
      - traefik.http.routers.qbittorrent.entrypoints=websecure
      - traefik.http.routers.qbittorrent.tls.certresolver=stepca
      - traefik.http.routers.qbittorrent.service=qbittorrent
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8080


    dns_search: proxy
    networks:
      proxy:

volumes:
  radarr-config:
  sonarr-config:
  bazarr-config:
  lidarr-config:
  readarr-config:
  prowlarr-config:
  jellyseerr-config:
  qbittorrent-config:

networks:
  proxy:
    external: true

